/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Follower } from "./Follower";
import { FollowerCountArgs } from "./FollowerCountArgs";
import { FollowerFindManyArgs } from "./FollowerFindManyArgs";
import { FollowerFindUniqueArgs } from "./FollowerFindUniqueArgs";
import { CreateFollowerArgs } from "./CreateFollowerArgs";
import { UpdateFollowerArgs } from "./UpdateFollowerArgs";
import { DeleteFollowerArgs } from "./DeleteFollowerArgs";
import { FollowerService } from "../follower.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Follower)
export class FollowerResolverBase {
  constructor(
    protected readonly service: FollowerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "read",
    possession: "any",
  })
  async _followersMeta(
    @graphql.Args() args: FollowerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Follower])
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "read",
    possession: "any",
  })
  async followers(
    @graphql.Args() args: FollowerFindManyArgs
  ): Promise<Follower[]> {
    return this.service.followers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Follower, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "read",
    possession: "own",
  })
  async follower(
    @graphql.Args() args: FollowerFindUniqueArgs
  ): Promise<Follower | null> {
    const result = await this.service.follower(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Follower)
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "create",
    possession: "any",
  })
  async createFollower(
    @graphql.Args() args: CreateFollowerArgs
  ): Promise<Follower> {
    return await this.service.createFollower({
      ...args,
      data: {
        ...args.data,

        follower: args.data.follower
          ? {
              connect: args.data.follower,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Follower)
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "update",
    possession: "any",
  })
  async updateFollower(
    @graphql.Args() args: UpdateFollowerArgs
  ): Promise<Follower | null> {
    try {
      return await this.service.updateFollower({
        ...args,
        data: {
          ...args.data,

          follower: args.data.follower
            ? {
                connect: args.data.follower,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Follower)
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "delete",
    possession: "any",
  })
  async deleteFollower(
    @graphql.Args() args: DeleteFollowerArgs
  ): Promise<Follower | null> {
    try {
      return await this.service.deleteFollower(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Follower], { name: "followers" })
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "read",
    possession: "any",
  })
  async findFollowers(
    @graphql.Parent() parent: Follower,
    @graphql.Args() args: FollowerFindManyArgs
  ): Promise<Follower[]> {
    const results = await this.service.findFollowers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Follower, {
    nullable: true,
    name: "follower",
  })
  @nestAccessControl.UseRoles({
    resource: "Follower",
    action: "read",
    possession: "any",
  })
  async getFollower(
    @graphql.Parent() parent: Follower
  ): Promise<Follower | null> {
    const result = await this.service.getFollower(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
